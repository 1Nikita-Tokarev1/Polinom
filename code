import pandas as pd
import numpy as np
import math

num_pts = [3, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = 0


def function(x):
    return 2 * x - math.cos(x)
    # return 2*x - np.cos(x)


def derivative_function(x, n):
    if n == 3:
        return -math.sin(x)
    else:
        return math.cos(x + ((n - 2) * math.pi) / 2)



def lagrange_polynomial(x):
    points = list(np.linspace(0.5, 1, num_pts[index]))
    result = 0
    for i in range(0, num_pts[index]):
        product = function(points[i])
        for j in range(0, num_pts[index]):
            if j != i:
                product *= ((x - points[j]) / (points[i] - points[j]))
        result += product
    return result


def norm(function):
    return max(abs(function(x)) for x in np.linspace(0.5, 1, 1000))


def absolute_error(func1, func2):
    return max(abs(func1(x) - func2(x)) for x in np.linspace(0.5, 1, 1000))


def relative_error(func1, func2):
    return ((absolute_error(func1, func2)) / norm(func2)) * 100


def theoretical_error(n):
    return (0.5 ** (n + 1)) * max(abs(derivative_function(x, n + 1)) for x in np.linspace(0.5, 1, 1000)) / math.factorial(n + 1)


absolute_error_list = []
relative_error_list = []
theoretical_error_list = []

for k in range(0, len(num_pts)):
    index = k
    abs_err = absolute_error(lagrange_polynomial, function)
    rel_err = relative_error(lagrange_polynomial, function)
    th_err = theoretical_error(num_pts[k])

    absolute_error_list.append(abs_err)
    relative_error_list.append(rel_err)
    theoretical_error_list.append(th_err)

abs_df = pd.DataFrame(absolute_error_list, num_pts, columns=["Value"])
rel_df = pd.DataFrame(relative_error_list, num_pts, columns=["Value"])
ter_df = pd.DataFrame(theoretical_error_list, num_pts, columns=["Value"])

total_df = pd.DataFrame({"n": num_pts,
                         "Абсолютная ошибка": absolute_error_list,
                         "Относительная ошибка": relative_error_list,
                         "Теоретическая ошибка": theoretical_error_list},
                        )
total_df.style.hide(axis="index")
print(total_df)
